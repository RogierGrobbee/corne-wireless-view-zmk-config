/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        HMR: HMR {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 12 25 13 1 24 26 14 2 3 15 27 28 16 4 5 17 29 36 37 38 39 40 41 0 1 2 3 4 12 13 14 15 16 24 25 26 27 28 36 37>;
        };

        HML: HML {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41 38 37 36>;
        };
    };

    combos {
        compatible = "zmk,combos";

        YH {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <15 16>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        UJ {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <19 20>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        HN {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <27 28>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        JM {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <31 32>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        IK {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <3 4>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        OL {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 8>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        K_COMMA {
            bindings = <&kp LESS_THAN>;
            key-positions = <14 15>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        L_PERIOD {
            bindings = <&kp GREATER_THAN>;
            key-positions = <21 20>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
        };

        FG {
            bindings = <&kp EQUAL>;
            key-positions = <16 17>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        QA {
            bindings = <&kp EXCLAMATION>;
            key-positions = <19 18>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        WS {
            bindings = <&kp AT_SIGN>;
            key-positions = <2 14>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        ED {
            bindings = <&kp HASH>;
            key-positions = <16 28>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        RF {
            bindings = <&kp DOLLAR>;
            key-positions = <19 31>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        TG {
            bindings = <&kp PERCENT>;
            key-positions = <34 22>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        AZ {
            bindings = <&kp CARET>;
            key-positions = <13 25>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        SX {
            bindings = <&kp AMPERSAND>;
            key-positions = <7 19>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        DC {
            bindings = <&kp ASTERISK>;
            key-positions = <15 27>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        FV {
            bindings = <&kp MINUS>;
            key-positions = <3 15>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        GB {
            bindings = <&kp PLUS>;
            key-positions = <4 16>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };

        Pipe {
            bindings = <&kp PIPE>;
            key-positions = <8 20>;
            timeout-ms = <50>;
            require-prior-idle-ms = <150>;
            layers = <0>;
        };
    };

    macros {
        email: email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp R &kp O &kp G &kp I &kp E &kp R &kp DOT &kp G &kp R &kp O &kp B &kp B &kp E &kp E &kp AT &kp S &kp H &kp E &kp R &kp P &kp A &kp A &kp N &kp DOT &kp N &kp L>;
            label = "EMAIL";
        };

        del_line: del_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp END &kp LS(HOME) &kp DEL>;
            label = "DEL_LINE";
        };

        jig: jig {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mmv -10 0 &wait 10000 &mmv 10 0 &wait 10000 &jig>;
            label = "JIG";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            display-name = "Base";
            bindings = <
&kp TAB         &kp Q            &kp W            &kp E                &kp R              &kp T        &kp Y    &kp U              &kp I                 &kp O             &kp P                &kp BSPC
&del_line       &HML LEFT_GUI A  &HML LEFT_ALT S  &HML LEFT_CONTROL D  &HML LEFT_SHIFT F  &kp G        &kp H    &HMR LEFT_SHIFT J  &HMR RIGHT_CONTROL K  &HMR RIGHT_ALT L  &HMR RIGHT_GUI SEMI  &kp SQT
&kp LEFT_SHIFT  &kp Z            &kp X            &kp C                &kp V              &kp B        &kp N    &kp M              &kp COMMA             &kp DOT           &kp FSLH             &kp RIGHT_SHIFT
                                                  &mo 3                &mo 2              &kp SPACE    &kp RET  &mo 1              &mo 4
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Nav";
            bindings = <
&trans  &trans        &trans        &trans            &trans          &trans       &trans    &kp F12   &trans    &trans     &trans              &kp DELETE
&trans  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &trans       &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &trans              &kp GRAVE
&trans  &trans        &trans        &kp HOME          &kp END         &trans       &trans    &trans    &mkp MB4  &mkp MB5   &kp LC(LEFT_ARROW)  &kp LC(RIGHT_ARROW)
                                    &trans            &trans          &kp SPACE    &kp RET   &trans    &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            display-name = "Num";
            bindings = <
&kp ESC     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5          &kp BACKSLASH    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSPACE
&kp PERIOD  &kp NUMBER_6  &kp N7        &kp N8        &kp N9        &kp N0          &kp EXCLAMATION  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp LESS_THAN     &kp GREATER_THAN   &kp HASH
&kp COMMA   &kp SLASH     &kp MINUS     &kp PLUS      &kp EQUAL     &kp ASTERISK    &kp UNDERSCORE   &kp AMPERSAND         &kp PIPE               &kp DOLLAR        &kp PERCENT        &kp TILDE
                                        &trans        &trans        &kp SPACE       &kp RET          &trans                &trans
            >;
        };

        Extra {
            bindings = <
&trans         &kp LC(LG(Q))  &trans         &trans         &email     &trans    &msc SCRL_UP    &mkp MB1        &mmv MOVE_UP    &mkp MB2         &trans  &jig
&kp LC(LG(S))  &kp LS(LC(F))  &kp LS(LC(S))  &kp BACKSPACE  &kp RET    &trans    &msc SCRL_DOWN  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans  &kp C_VOLUME_UP
&trans         &kp LC(Z)      &kp LC(X)      &kp LC(C)      &kp LC(V)  &trans    &trans          &trans          &trans          &trans           &trans  &kp C_VOLUME_DOWN
                                             &trans         &trans     &trans    &trans          &trans          &trans
            >;

            label = "Left";
        };

        Function {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2      &bt BT_SEL 3    &bt BT_SEL 4    &kp F1  &kp F2  &kp F3  &kp F4   &kp F5   &kp F6
&trans      &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &trans          &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&trans      &trans        &trans        &trans            &trans          &trans          &trans  &trans  &trans  &trans   &trans   &trans
                                        &trans            &trans          &trans          &trans  &trans  &trans
            >;
        };

        extra_1 { status = "reserved"; };

        extra_2 { status = "reserved"; };

        extra_3 { status = "reserved"; };
    };
};
